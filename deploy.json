{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string",
            "metadata": {
                "description": "Location where the resources will be deployed."
            }
        },
        "createPublicIP": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Do you want to create a public IP address for the source server?"
            }
        },
        "sourceWindowsAdminUserName": {
            "type": "string",
            "metadata": {
                "description": "Windows Authentication user name for the source server"
            }
        },
        "sourceWindowsAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Windows Authentication password for the source server"
            }
        },
        "sourceSqlAuthenticationPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Sql Authentication password for the source server (User name will be same as Windows Auth)"
            }
        },
        "vmSize": {
            "type": "string",
            "metadata": {
                "description": "Source VM size"
            },
            "defaultValue": "Standard_D8s_v3"
        },
       "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            },
            "defaultValue": ""
        },
		 "dataFactoryName": {
      "type": "string",
      "defaultValue": "[format('dfinstance{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Data Factory Name"
      }
    },
	 "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('storage{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Azure storage account that contains the input/output data."
      }
    },
    "blobContainerName": {
      "type": "string",
      "defaultValue": "[format('blob{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the blob container in the Azure Storage account."
      }
    },
    "IntegrationRuntimeName": {
      "type": "string",
	    "defaultValue": "[format('ir{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "IR name must be unique in subscription"
      }
    } ,
    "GatewayName": {
      "type": "string",
	      "defaultValue": "[format('gateway{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Gateway name must be unique in subscription"
      }
	},
	     "SynapsewsName": {
      "type": "string",
	      "defaultValue": "[format('synapsews{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Synapse Workspace name must be unique in subscription"
      }
	},
	      "SynapseStorageName": {
      "type": "string",
	      "defaultValue": "[format('ss{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Synapse storage name must be unique in subscription"
      }
	},
	    "SynapsedlsFsName": {
      "type": "string",
	      "defaultValue": "[format('sfs{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Synapse FileSystem name must be unique in subscription"
      }
	},
	    "keyVaultName": {
        "type": "string",
		     "defaultValue": "[format('keyvault{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the name of the key vault."
        }
      }
	  
    },
    "variables": {
        "DMSServiceName": "[concat('DMS', uniqueString(resourceGroup().id))]",
        "sourceServerName": "[take(concat('Source', uniqueString(resourceGroup().id)), 15)]",
        "scriptLocation": "adddatabase.ps1",
        "pathwayscriptLocation": "installsynapsepathway.ps1",
	"exportddlscriptlocation": "exportddl.ps1",
        "bakFileLocation": "tpcds.bak",
	"gatewayscriptlocation": "gatewayinstall.ps1",
	"conversionscriptlocation": "converttablesddl.ps1",
        "userAssignedIdentityName": "configDeployer",
	    "mainscript": "main.ps1",
	"scriptURL": "[uri(parameters('_artifactsLocation'), concat(variables('gatewayscriptlocation'), parameters('_artifactsLocationSasToken')))]", 
	"IRtemplateLink": "[uri(parameters('_artifactsLocation'), concat('IRtemplate.json', parameters('_artifactsLocationSasToken')))]",
	"irInstallTemplateLink": "[uri(parameters('_artifactsLocation'), concat('IRInstall.json', parameters('_artifactsLocationSasToken')))]",
        "roleAssignmentName": "[guid(concat(resourceGroup().id, 'owner'))]",
        "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "deploymentScriptName": "CopyConfigScript",
        "scriptFiles": [
            "[uri(parameters('_artifactsLocation'), concat(variables('scriptLocation'), parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'), concat(variables('bakFileLocation'), parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'), concat(variables('pathwayscriptLocation'), parameters('_artifactsLocationSasToken')))]",
	"[uri(parameters('_artifactsLocation'), concat(variables('exportddlscriptlocation'), parameters('_artifactsLocationSasToken')))]",
	    "[uri(parameters('_artifactsLocation'), concat(variables('conversionscriptlocation'), parameters('_artifactsLocationSasToken')))]",
		 "[uri(parameters('_artifactsLocation'), concat(variables('gatewayscriptlocation'), parameters('_artifactsLocationSasToken')))]",
	    "[uri(parameters('_artifactsLocation'), concat(variables('mainscript'), parameters('_artifactsLocationSasToken')))]"
        ],
        "scriptParameters": "[concat('-userName ', parameters('sourceWindowsAdminUserName'), ' -password \"', parameters('sourceWindowsAdminPassword'))]",
        "storageAccountNamePrefix": "storage",
        "storageAccountName": "[toLower(concat(variables('storageAccountNamePrefix'), uniqueString(resourceGroup().id)))]",
        "sourceNicName": "SourceNIC-1",
        "publicIPSourceServer": "SourceServer1-ip",
        "sourceServerNSG": "SourceServer1-nsg",
        "adVNet": "AzureDataMigrationServiceTemplateRG-vnet",
        "defaultSubnetName": "default",
        "databaseName": "TargetDatabaseName1",
        "publicIpAddressId": {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPSourceServer'))]"},
		  "sqlSecretName": "SqlLoginPassword",
        "sqlSecretValue": "[parameters('sourceSqlAuthenticationPassword')]",
        "VMSecretName": "VMLoginPassword",
        "VMSecretValue": "[parameters('sourceWindowsAdminPassword')]",
        "tenantId": "[subscription().tenantId]",
        
		"dataFactoryLinkedServiceName": "ArmtemplateStorageLinkedService",
    "dataFactoryDataSetInName": "ArmtemplateTestDatasetIn",
    "dataFactoryDataSetOutName": "ArmtemplateTestDatasetOut",
    "pipelineName": "ArmtemplateSampleCopyPipeline"
    
        },
    "resources": [
	 
	    
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('sourceServerName')]",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('sourceNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftSQLServer",
                        "offer": "SQL2016SP1-WS2016",
                        "sku": "Standard",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Windows",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 127
                    },
                    "dataDisks": [
                        {
                            "lun": 0,
                            "name": "[concat(variables('sourceServerName'),'_disk-1')]",
                            "createOption": "Empty",
                            "caching": "ReadOnly",
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            },
                            "diskSizeGB": 1023
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('sourceServerName')]",
                    "adminUsername": "[parameters('sourceWindowsAdminUserName')]",
                    "adminPassword": "[parameters('sourceWindowsAdminPassword')]",
                    "windowsConfiguration": {
                        "provisionVMAgent": true,
                        "enableAutomaticUpdates": true
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('sourceNicName')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('storageAccountName'), '2019-06-01').primaryEndpoints['blob']]"
                    }
                }
            },
            "resources": [
                 
     
                {
                    "apiVersion": "2019-12-01",
                    "type": "extensions",
                    "name": "SqlIaasExtension",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/', variables('sourceServerName'))]"
                    ],
                    "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": "true",
                        "settings": {
                            "AutoTelemetrySettings": {
                                "Region": "[parameters('location')]"
                            },
                            "AutoPatchingSettings": {
                                "PatchCategory": "WindowsMandatoryUpdates",
                                "Enable": false,
                                "DayOfWeek": "Sunday",
                                "MaintenanceWindowStartingHour": "2",
                                "MaintenanceWindowDuration": "60"
                            },
                            "KeyVaultCredentialSettings": {
                                "Enable": false
                            },
                            "ServerConfigurationsManagementSettings": {
                                "SQLConnectivityUpdateSettings": {
                                    "ConnectivityType": "Private",
                                    "Port": "1433"
                                },
                                "SQLWorkloadTypeUpdateSettings": {
                                    "SQLWorkloadType": "OLTP"
                                },
                                "SQLStorageUpdateSettings": {
                                    "DiskCount": "1",
                                    "NumberOfColumns": "8",
                                    "StartingDeviceID": "2",
                                    "DiskConfigurationType": "NEW"
                                },
                                "AdditionalFeaturesServerConfigurations": {
                                    "IsRServicesEnabled": "false"
                                }
                            }
                        },
                        "protectedSettings": {
                            "SQLAuthUpdateUserName": "[parameters('sourceWindowsAdminUserName')]",
                            "SQLAuthUpdatePassword": "[parameters('sourceSqlAuthenticationPassword')]"
                        }
					}
			
			
                },
		      {
                    "apiVersion": "2019-12-01",
                    "type": "extensions",
                    "name": "pathwayCustomScriptExtension",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/', variables('sourceServerName'))]",
			    "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('sourceServerName'), 'SqlIaasExtension')]"
                                           ],
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.9",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": "[variables('scriptFiles')]"
                        },
                        "protectedSettings": {
                            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', './', variables('mainscript'), ' ', listAuthKeys(resourceId('Microsoft.Synapse/workspaces/integrationRuntimes', parameters('SynapsewsName'), parameters('IntegrationRuntimeName')), '2021-06-01').authKey1, ' ' , parameters('sourceWindowsAdminUserName'),' ' ,parameters('sourceWindowsAdminPassword'))]"
                        }
                    }
                }
		  

		  
           
	            ]
        },
		    
                
        {
            "type": "Microsoft.DataMigration/services",
            "sku": {
                "name": "Standard_4vCores",
                "tier": "Standard",
                "size": "4 vCores"
            },
            "name": "[variables('DMSServiceName')]",
            "apiVersion": "2018-07-15-preview",
            "location": "[parameters('location')]",
            "properties": {
                "virtualSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('adVNet'), variables('defaultSubnetName'))]"
            },
            "resources": [
                {
                    "type": "projects",
                    "name": "SqlToSqlDbMigrationProject",
                    "apiVersion": "2018-07-15-preview",
                    "location": "[parameters('location')]",
                    "properties": {
                        "sourcePlatform": "SQL",
                        "targetPlatform": "SQLDB"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DataMigration/services', variables('DMSServiceName'))]"
                    ]
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('adVNet'), variables('defaultSubnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('sourceNicName')]",
            "apiVersion": "2020-05-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('adVNet'), variables('defaultSubnetName'))]",
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIPSourceServer'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('adVNet'), variables('defaultSubnetName'))]"
                            },
                            "publicIPAddress": "[if(parameters('createPublicIP'), variables('publicIpAddressId'), json('null'))]",
                            "primary": true,
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('sourceServerNSG')]",
            "apiVersion": "2020-05-01",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowAzureLoadBalancerInBound",
                        "properties": {
                            "description": "Allow inbound traffic from azure load balancer",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('createPublicIP')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "sku": {
                "name": "Basic",
                "tier": "Regional"
            },
            "name": "[variables('publicIPSourceServer')]",
            "apiVersion": "2020-05-01",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic",
                "idleTimeoutInMinutes": 4
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('adVNet')]",
            "apiVersion": "2020-05-01",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.2.0.0/24"
                    ]
                },
                "subnets": [
                    {
                        "name": "default",
                        "properties": {
                            "addressPrefix": "10.2.0.0/24"
                        }
                    }
                ],
                "enableDdosProtection": false,
                "enableVmProtection": false
            },
            "resources": [
                {
                    "type": "subnets",
                    "name": "[variables('defaultSubnetName')]",
                    "apiVersion": "2020-05-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('adVNet'))]"
                    ],
                    "properties": {
                        "addressPrefix": "10.2.0.0/24"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "name": "[parameters('storageAccountName')]",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": false,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
		 
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[parameters('dataFactoryName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.DataFactory/factories/linkedservices",
      "apiVersion": "2018-06-01",
      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dataFactoryLinkedServiceName'))]",
      "properties": {
        "type": "AzureBlobStorage",
        "typeProperties": {
          "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value)]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dataFactoryDataSetInName'))]",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[variables('dataFactoryLinkedServiceName')]",
          "type": "LinkedServiceReference"
        },
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName'))]",
            "folderPath": "input",
            "fileName": "emp.txt"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[2])]",
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), variables('dataFactoryLinkedServiceName'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dataFactoryDataSetOutName'))]",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[variables('dataFactoryLinkedServiceName')]",
          "type": "LinkedServiceReference"
        },
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName'))]",
            "folderPath": "output"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[2])]",
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), variables('dataFactoryLinkedServiceName'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('pipelineName'))]",
      "properties": {
        "activities": [
          {
            "name": "MyCopyActivity",
            "type": "Copy",
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobStorageWriterSettings"
                }
              },
              "enableStaging": false
            },
            "inputs": [
              {
                "referenceName": "[variables('dataFactoryDataSetInName')]",
                "type": "DatasetReference"
              }
            ],
            "outputs": [
              {
                "referenceName": "[variables('dataFactoryDataSetOutName')]",
                "type": "DatasetReference"
              }
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/datasets', parameters('dataFactoryName'), variables('dataFactoryDataSetInName'))]",
        "[resourceId('Microsoft.DataFactory/factories/datasets', parameters('dataFactoryName'), variables('dataFactoryDataSetOutName'))]"
      ]
    },
	     {
      "type": "Microsoft.DataFactory/factories/integrationruntimes",
      "apiVersion": "2018-06-01",
      "name":  "[concat(parameters('dataFactoryName'), '/', parameters('IntegrationRuntimeName'))]",
      "properties": {
        "type": "SelfHosted",
        "description": "Self-hosted Integration runtime created using ARM template"
      },
		     "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]" ]
    },
	  {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[parameters('SynapseStorageName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "isHnsEnabled": true
      },
      "resources": [
        {
          "name": "[concat('default/', parameters('SynapsedlsFsName'))]",
          "type": "blobServices/containers",
          "apiVersion": "2019-06-01",
          "dependsOn": [
            "[parameters('SynapseStorageName')]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        }
      ]
    },
	    {
            "apiVersion": "2021-06-01",
            "name": "[parameters('SynapsewsName')]",
            "location": "[parameters('location')]",
            "type": "Microsoft.Synapse/workspaces",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "defaultDataLakeStorage": {
                    "accountUrl": "[reference(parameters('SynapseStorageName')).primaryEndpoints.dfs]",
                    "filesystem": "[parameters('SynapsedlsFsName')]"
                },
                "sqlAdministratorLogin": "[parameters('sourceWindowsAdminUserName')]",
                "sqlAdministratorLoginPassword": "[parameters('sourceSqlAuthenticationPassword')]"
            },
      "resources": [
        {
           "type": "firewallrules",
          "apiVersion": "2021-06-01",
          "name": "allowAll",
          "location": "[parameters('location')]",
          "dependsOn": [ "[parameters('SynapsewsName')]" ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "255.255.255.255"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2021-06-01",
          "name": "AllowAllWindowsAzureIps",
          "location": "[parameters('location')]",
          "dependsOn": [ "[parameters('SynapsewsName')]" ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "managedIdentitySqlControlSettings",
          "apiVersion": "2021-06-01",
          "name": "default",
          "location": "[parameters('location')]",
          "dependsOn": [ "[parameters('SynapsewsName')]" ],
          "properties": {
            "grantSqlControlToManagedIdentity": {
              "desiredState": "Enabled"
            }
          }
        }
      ]
    },
	
  {
      "type": "Microsoft.Synapse/workspaces/integrationRuntimes",
      "apiVersion": "2021-06-01",
      "name":  "[concat(parameters('SynapsewsName'), '/', parameters('IntegrationRuntimeName'))]",
      "properties": {
        "type": "SelfHosted",
        "description": "Synapse Self-hosted Integration runtime created using ARM template"
      },
		     "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', parameters('SynapsewsName'))]" ]
    }	   ,
	       {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2021-11-01-preview",
        "name": "[parameters('keyVaultName')]",
        "location": "[parameters('location')]",
        "properties": {
          "tenantId": "[variables('tenantId')]",
          "enableSoftDelete": false,
          "accessPolicies": [ {
                "tenantId": "[variables('tenantId')]",
                "objectId": "[reference(concat('Microsoft.Synapse/workspaces/', parameters('SynapsewsName')), '2021-11-01-preview', 'Full').identity.principalId]",
                "permissions": {
                    "keys": [],
                    "secrets": [
                        "Get","List"
		    ],
                    "certificates": []
                }
            }
			    ],
          "sku": {
            "name": "Standard",
            "family": "A"
          },
          "networkAcls": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        },
		         "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', parameters('SynapsewsName'))]" ]
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "[concat(parameters('keyVaultName'), '/', variables('sqlSecretName'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
        ],
        "properties": {
          "value": "[variables('sqlSecretValue')]"
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "[concat(parameters('keyVaultName'), '/', variables('VMSecretName'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
        ],
        "properties": {
          "value": "[variables('VMSecretValue')]"
        }
      },
	    {
    "name": "[concat(parameters('SynapsewsName'), '/', 'AzureKeyVault1')]",
    "type": "Microsoft.Synapse/workspaces/linkedservices",
    "properties": {
        "annotations": [],
        "type": "AzureKeyVault",
        "typeProperties": {
            "baseUrl": "https://keyvaultr6illo6qzn4g4.vault.azure.net/"
		"baseUrl": "@{concat('https://',[parameters('keyVaultName')],'.vault.azure.net/')
        }
    }
}
		    
	    
 ]
}
